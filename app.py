"""
||| Main structure:
    (__main__)app.py
    Initialize(do one time only**):
        subject_list[Subject]: List - Subject is a self defined class to contain the information generated by the user
        current_subject: Subject - The current subject of focus of the user
        DocLoader: Class
        ContentGenerator: Class

    (page 1) load documents
        description: Use this page to load the text you are reading. Manage and navigate existing
        subjects here.

        create: Subject
            1. selection box
            2. use url, pdf, or raw text(copy and paste) to generate documents
                - Using DocLoader class and functions
            3. initialize new Subject instance
            4. append Subject to subject_list
            5. set current_subject to the newly added Subject
            6. Switch to "summary" page
        select: Subject
            1. selection interface based on subject_list
            2. set current_subject to selected Subject
            3. Switch to "summary" page
        manage: Subject - delete or star subjects
            1. selection interface based on subject_list
            2. delete item from subject_list based on selection

    (page 2) summery
        description: This page generates a summary in point-form and in paragraph as the first 
        step to exploring the text.

        1. generate: points
            .....
        2. generate: summary
            .....
        3. update: subject
            .....

    (page 3) explore
        description: Use this page explore more about the main ideas(summary point-form).

        generate: explore_questions
            .....
        generate: critical_questions
            .....
        generate: perspectives
            .....

||| Classes: 

    DocLoader
        description: 
                Contains the document being inspected and the content generated by the user
        fields:
            url
            source: str - provides information about the source
            raw text
            chunk_size - setting for split_doc
            chunk_overlap - setting for split_doc
        interfacing methods:
            get_doc_from_url(url: str) -> Document
                - get document from url, from website articles
                - add source to doc metadata
            get_doc_from_pdf(file: Unkown yet***) -> Document
                - get document from pdf files
                - add source to doc metadata
            get_doc_from_raw_text(text: str) -> Document
                - get document from copy and pasted text in the input box
                - add source to doc metadata
        internal methods:
            split_clean_doc(doc: Document) -> Document
                - clean doc of extra new lines and spaces
            split_doc(doc: Document): -> Document
                - split documents from one big document

    Subject 
        description: 
            Contains the document being looked at and the content generated by the user
        fields:
            doc: Document 
                - the document the subject is about
            content: Dict - content generated by the app for the user
                summary: str
                key_points: list[str]
                explore_questions: list[str]
                critical_questions: list[str]
                perspectives: list[str]
            //thoughts: Dict - thoughts generated by llm for intermediate thinking
        methods:

    ContentGenerator
        description:
            Used to generate content to help user gain insight and meaningful thinking about their subject
        fields:
            summary_points_chain
                Input: doc: Document
                Output: key_points: list[str]
            short_summary_chain
                Input: key_points: list[str]
                Output: summary: str
            explore_chain
                Input: summary: str, selected_point: str
                Output: 
                    explore_questions: list[str]
            critical_chain
                Input: summary: str, selected_point: str
                Output: 
                    critiacal_questions: list[str]
        methods:
            get_main_ideas_chain():
                return LLMChain
            get_short_summary_chain():
                return LLMChain
            get_explore_chain():
                return LLMChain
            get_critical_chain():
                return LLMChain

        
||| ideas and key features that should be done

    # LLM response quality
    - Provide different tools for different reading category
        etc:
        - History
        - Politics
        - Technology
        - Informative
        - Opinion article
        - News article

    ## Document loader
    

    ## Summery
    

    ## Explore
    
"""



import streamlit as st
from st_pages import Page, Section, add_page_title, show_pages

from langchain.document_loaders import WebBaseLoader
from langchain.llms import OpenAI


# Declaring the pages in your app

show_pages(
    [
        Page("pages/document loader.py", "Document Loader"),
        Page("pages/explore.py", "Explore"),
        Page("pages/summery.py", "Summery")
    ]
)
add_page_title()  # Optional method to add title and icon to current page


if "doc_sources" not in st.session_state:
        st.session_state.doc_sources = []
if "doc_content" not in st.session_state:
    st.session_state.google_sources = []
if "content" not in st.session_state:
    st.session_state.content = {"summary": "",
                                "key_points": "",
                                }
if "agent" not in st.session_state:
    st.session_state.agent = ConversationalAgent()


